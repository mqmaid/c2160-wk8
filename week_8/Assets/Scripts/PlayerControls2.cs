//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls2: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls2"",
    ""maps"": [
        {
            ""name"": ""movement2"",
            ""id"": ""0c88903d-e10b-4d43-af94-1f8a29445f0e"",
            ""actions"": [
                {
                    ""name"": ""playerMovement2"",
                    ""type"": ""Value"",
                    ""id"": ""c74a2611-1466-4d12-a356-4c7ed6594770"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9b95effe-33a0-4287-b55e-181041156771"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9aa951ac-e1a8-4b37-9aa3-6100f0afee32"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9dbc0f13-df24-418a-9a91-2bfedb6fb4ae"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9c09e987-d3ab-4ed6-bb78-219dad2f974e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""948d6e94-54df-4ff1-88da-92610769462a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement2
        m_movement2 = asset.FindActionMap("movement2", throwIfNotFound: true);
        m_movement2_playerMovement2 = m_movement2.FindAction("playerMovement2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement2
    private readonly InputActionMap m_movement2;
    private List<IMovement2Actions> m_Movement2ActionsCallbackInterfaces = new List<IMovement2Actions>();
    private readonly InputAction m_movement2_playerMovement2;
    public struct Movement2Actions
    {
        private @PlayerControls2 m_Wrapper;
        public Movement2Actions(@PlayerControls2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @playerMovement2 => m_Wrapper.m_movement2_playerMovement2;
        public InputActionMap Get() { return m_Wrapper.m_movement2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Movement2Actions set) { return set.Get(); }
        public void AddCallbacks(IMovement2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Movement2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Movement2ActionsCallbackInterfaces.Add(instance);
            @playerMovement2.started += instance.OnPlayerMovement2;
            @playerMovement2.performed += instance.OnPlayerMovement2;
            @playerMovement2.canceled += instance.OnPlayerMovement2;
        }

        private void UnregisterCallbacks(IMovement2Actions instance)
        {
            @playerMovement2.started -= instance.OnPlayerMovement2;
            @playerMovement2.performed -= instance.OnPlayerMovement2;
            @playerMovement2.canceled -= instance.OnPlayerMovement2;
        }

        public void RemoveCallbacks(IMovement2Actions instance)
        {
            if (m_Wrapper.m_Movement2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovement2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Movement2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Movement2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Movement2Actions @movement2 => new Movement2Actions(this);
    public interface IMovement2Actions
    {
        void OnPlayerMovement2(InputAction.CallbackContext context);
    }
}
